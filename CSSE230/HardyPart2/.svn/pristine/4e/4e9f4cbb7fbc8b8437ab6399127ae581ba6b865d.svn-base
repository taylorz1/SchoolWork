package hardysTaxi;

/**
 * Provides the static method hardySolutionsLessThan(N) which finds all "taxicab
 * numbers that are less than n. These are represented as TaxicabNumber objects,
 * which include the sum and two different ways of writing that as a sum of two
 * cubes.
 * 
 * @author Claude Anderson.
 * 
 */
public class Hardy {

	// TODO: Declare any variables or helper methods that you need.

	/**
	 * Find the nth Hardy number (start counting with 1, not 0) and the numbers
	 * whose cubes demonstrate that it is a Hardy number.
	 * 
	 * @param n
	 * @return the nth Hardy number
	 */
	public static long nthHardyNumber(int n) {

		// TODO: If you have any fields that are arrays or collections,
		// You must clear them at the beginning of each call to this method.
		// This is so that values calculated by previous calls do not speed up
		// subsequent calls.

		// TODO: replace the following dummy statement by real code that
		// calculates
		// and returns the nth Hardy number.
		
		
		/*TODO: Some thoughts,
		 * -If a and b are odd, c and d must be odd
		 * -If a or b is even, c or d must be even
		 * - 1^3 = 1
		 * - 2^3 = 3 + 5
		 * - 3^3 = 7 + 9 + 11
		 * - 4^3 = 13 + 15 + 17 + 19
		 * - N^3 = N*(N+1)/2  (Not true, but formula probably exists, we just have to think it through)
		 */
		return 0;

	}

}
