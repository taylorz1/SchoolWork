/* Interrupt Handler */
/* Jarrett Alexander, Tucker Osman, Zach Taylor */

#include "./kernel.h"
#include "./interrupt_handler.h"
#include "./terminal.h"
#include "./floppy_driver.h"
#include "./prog.h"

void handleInterrupt21(int ax, int bx, int cx, int dx) {
	setKernelDataSegment();
	if (ax == 0) {
		printString(bx);
	} else if (ax == 1) {
		readString(bx);
	} else if (ax == 2) {
		readSector(bx, cx);
	} else if (ax == 3) {
		readFile(bx, cx);
	} else if (ax == 4) {
		executeProgram(bx);
	} else if (ax == 5) {
		terminateProgram();
	} else if (ax == 6) {
		writeSector(bx,cx);
	} else if (ax == 7) {
		deleteFile(bx);
	} else if (ax == 8) {
		writeFile(bx, cx, dx);
	} else if (ax == -1) {
		shutdownQemu();
		shutdownBochs();
	} else {
		printString("Not a valid command\r\n\0");
	}
	restoreDataSegment();
}

void handleTimerInterrupt(int segment, int sp) {
	/* decide who's next to run */
	int i;
	printString("tic\0");
	for(i=1;i<=8;i++) {
		if(processes[(i+currentProcess)%8].active==1) {
			currentProcess = (i+currentProcess)%8;
			returnFromTimer((currentProcess+2)*0x1000,processes[currentProcess].sp);
		}
	}
	returnFromTimer(segment,sp);
}
