/* Copyright Zach Taylor and Tucker Osman 2017 */
#include <time.h>
#include "./airlinereservation.h"

int rows = COACH_ROWS + FIRST_ROWS;
int across = COACH_ACROSS;
sem_t sem1;
sem_t sem2;
sem_t sem3;
key_t key = 1005;

int main(int argc, char* argv[]) {
    /* DONE: Begin implementing your solutions here. */
    if (argc < 3) {
        perror("Not enough arguments");
        fprintf(stderr, "Usage: %s (number of customers) (outputfile.txt)\n",
                argv[0]);
        exit(1);
    }
    FILE* file;
    file = fopen(argv[2], "w");
    fclose(file);

    int shmid;
    shmid = shmget(key, sizeof(sharedmem), IPC_CREAT | 0666);
    if (shmid < 0) {
        perror("weow error creating shared mem\n");
        exit(1);
    }
    sharedmem* shmptr = (sharedmem*) shmat(shmid, NULL, 0);
    if (shmptr == NULL) {
        perror("whoa dude we failed to map or something");
        exit(1);
    }
    int pid;
    sem_init(&shmptr->sem1, 1, 1);
    sem_init(&shmptr->sem2, 1, 1);
    sem_init(&shmptr->sem3, 1, 1);
    int j = atoi(argv[1]);
    int index;
    printSeatsAvailable(&shmptr->planestruct);
    for (index = 0; index < j; index++) {
        pid = fork();
        if (pid < 0) {
            perror("could not fork");
            exit(1);
        }
        if (pid == 0) {
            executechild(index, argv[2]);
            exit(0);
        }
    }
    for (index = 0; index < j; index++) {
        wait(NULL);
    }

    printf("===============BOOKED AIRPLANE===============\n");
    printSeatsAvailable(&shmptr->planestruct);
    printf("===============BOOKED AIRPLANE===============\n");

    shmdt((void*) shmptr);
    shmctl(shmid, IPC_RMID, NULL);
    return 0;
}

void executechild(int n, char* name) {
    int seats;
    int coach;
    coach = wantsCoachSeating(n);
    seats = getNumberOfSeats(n, coach);
    int* reserved = calloc(seats, sizeof(int));
    FILE* file;
    int index = 0;
    int seatres;
    sharedmem* shmptr;
    while (index < seats) {
        int shmid = shmget(1005, sizeof(sharedmem), 0666);
        if (shmid < 0) {
            perror("the child didn't reconnect\n");
            exit(4);
        }
        shmptr = (sharedmem*) shmat(shmid, NULL, 0);
        if (shmptr < 0) {
            perror("the child didn't reattach\n");
            exit(5);
        }
        int remaining = seatsRemaining(&shmptr->planestruct, coach);
        if (remaining <= 0) {
            break;
        }
        if (coach != 0) {
            sem_wait(&shmptr->sem1);
            seatres = reserveRandomSeat(&shmptr->planestruct, coach);
            if (seatres == -1) {
                continue;
            }
            reserved[index] = seatres;
            printf("Customer %d reserved its coach seat No. %d.\n",
                n + 1, index);
            index++;
            printSeatsAvailable(&shmptr->planestruct);
            fflush(stdout);
            sem_post(&shmptr->sem1);
        } else {
            sem_wait(&shmptr->sem2);
            seatres = reserveRandomSeat(&shmptr->planestruct, coach);
            if (seatres == -1) {
                continue;
            }
            reserved[index] = seatres;
            printf("Customer %d reserved its first class seat No. %d.\n", n + 1,
                   index);
            index++;
            printSeatsAvailable(&shmptr->planestruct);
            fflush(stdout);
            sem_post(&shmptr->sem2);
        }
        printf("-----------------------------------------------\n"); fflush(stdout);
    }
    /* final print */
    sem_wait(&shmptr->sem3);
    file = fopen(name, "a");
    fprintf(file, "Customer %d Purchase Receipt\nCoach Seats -- %d:\n", n,
            index);
    index--;
    while (index >= 0) {
        char across = reserved[index] % FIRST_ACROSS + 65;
        int row = reserved[index] / FIRST_ACROSS + 1;
        fprintf(file, "\tSeat - %d%c\n", row, across);
        index--;
    }
    fprintf(file, "__________________________\n");
    fclose(file);
    sem_post(&shmptr->sem3);
    free(reserved);
    shmdt((void*)shmptr);
    return;
}

