plugins {
	id 'java'
	id 'eclipse'
	id 'idea'
	id 'application'
	id 'jacoco'
}

sourceCompatibility = 1.8

mainClassName = "client.Client"

repositories {
    maven {
        url "https://maven.csse.rose-hulman.edu/artifactory/libs-release"
    }
}

dependencies {
    compile 'com.google.guava:guava:23.0'
    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:2.+"
}

// Code coverage analyzer
jacoco {
	toolVersion = "0.8.+"
}


jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    
	reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
    
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['client/**', 'utils/**'])
        })
    }    
}


test {
	jacoco {
		append = false
	}
}

test.finalizedBy(jacocoTestReport)

task codeCoverageInfo (dependsOn: jacocoTestReport) {
	ext.srcFile = file("${reportsDir}/jacoco/test/jacocoTestReport.xml")
	doLast {
		println "Transforming source file."
		
		def parser = new XmlParser()
		parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false);
		parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
		parser.setFeature("http://xml.org/sax/features/namespaces", false)
				  
		def reportNode = parser.parse(srcFile)
		reportNode.children().each {
			if(it.name() == 'counter') {
				String type = it.@type
				float missed = it.@missed as float
				float covered = it.@covered as float
				float percentage = covered / (missed + covered) * 100
				println "Code Coverage[$type]: $percentage%"
			}
		}
	}
}
jacocoTestReport.finalizedBy(codeCoverageInfo)
